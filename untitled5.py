# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uK5V1ADdd7gcKf-oYFgVRyKgnzcXlLav
"""

!pip install openpyxl

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

!pip install ydata-profiling
from ydata_profiling import ProfileReport

final = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', engine='openpyxl')
print(final)

final.info

sheet_names = pd.ExcelFile('/content/New Microsoft Excel Worksheet (5).xlsx').sheet_names

print(sheet_names)

orders = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Orders')
order_details = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='OrderDetails')
customers = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Customers')
suppliers = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Suppliers')
shippers = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Shippers')
products =pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Products')
employees = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Employees')
categories = pd.read_excel('/content/New Microsoft Excel Worksheet (5).xlsx', sheet_name='Categories')

orders['OrderDate'] = pd.to_datetime(orders['OrderDate']).dt.date

print (orders['OrderDate'])

orders_cleaned = orders['OrderID'].dropna().sum()
print(orders_cleaned)

print(orders['OrderID'])

employees.head()

orders.shape

final.isna().sum

final.dropna(inplace=True)

orders[orders['OrderID'].duplicated()].sum()

orders.duplicated().sum()

"""Q1; What is the total revenue generated by each category?

"""

q1= pd.merge(products,categories, on='CategoryID').groupby('CategoryName').sum()['Price'] #Merge the two sheets on the common column
print(q1)

plt.figure(figsize=(4, 5))
q1.plot(kind='bar', color='DarkGreen')
plt.title('Total Revenue by Category')
plt.xlabel('Category')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.show()

"""Q2:How many unique products are sold per order?

"""

Q2= pd.merge(orders,order_details, on='OrderID').groupby('OrderID').count()['ProductID']
print(Q2)

orders['OrderDate'] = pd.to_datetime(orders['OrderDate'])# Convert 'OrderDate' column to datetime

"""Q3: How many orders were placed in each month?

"""

Q3 = orders.groupby(orders['OrderDate'].dt.month).count()['OrderID']
print(Q3)

plt.figure(figsize=(5, 5))
sns.barplot(x=Q3.index, y=Q3.values, palette='viridis')
plt.title('Count of Orders by Month')
plt.xlabel('Month')
plt.ylabel('Number of Orders')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

"""Q4:What are the total Quantity ordered by each customer?

"""

Q4= pd.merge(orders,order_details, on='OrderID').groupby('CustomerID').count()['Quantity']
print(Q4)

"""Q5= How many orders were placed in each country?"""

Q5= pd.merge(orders,customers, on='CustomerID').groupby('Country').count()['OrderID']
print(Q5)

!pip install squarify
import squarify
plt.figure(figsize=(5, 5))
squarify.plot(sizes=Q5.values, label=Q5.index, alpha=.8, color=sns.color_palette('mako', len(Q5)))
plt.title('Treemap of Orders by Country')
plt.axis('off')  # Hide axes
plt.show()

"""Q6:Which employee has processed the most orders

"""

Q6= pd.merge(orders, employees, on='EmployeeID').groupby('EmployeeID').count()['OrderID']
print(Q6)

plt.figure(figsize=(5, 5))
sns.barplot(x=Q6.index, y=Q6.values, palette='coolwarm')
plt.title('Count of Orders by Employee ID')
plt.xlabel('Employee ID')
plt.ylabel('Total Orders')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

"""Q7= Which shipper is used the most for delivering orders?

"""

Q7 = pd.merge(orders,shippers,on='ShipperID').groupby('ShipperName').count()['OrderID']
print(Q7)

plt.figure(figsize=(5, 5))
# Create a pie chart
plt.pie(Q7, labels=Q7.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel', len(Q7)))
plt.title('Count of Orders by Shipper ID')
plt.axis('equal')  # Equal aspect ratio ensures that pie chart is a circle.
plt.show()

"""Q8=Who are the top 5 suppliers in terms of product sales quantity?

"""

Q8= pd.merge(order_details,products, on='ProductID').groupby('SupplierID').sum()['Quantity'].sort_values(ascending=False).head(5)
print(Q8)

plt.figure(figsize=(3, 3))
sns.barplot(x=Q8.index, y=Q8.values, color='DarkGreen')
plt.title('Top 5 Suppliers by Total Quantity Ordered')
plt.xlabel('Supplier ID')
plt.ylabel('Total Quantity')
plt.xticks(rotation=30)
plt.grid(axis='y')
plt.show()